library(m2m)
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:2),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# optimize
mod$optimize()
mod$predict_allmethods(weight = 13.43, mc = 18)
library(m2m)
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:2),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# optimize
mod$optimize()
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 18)
mod$predict_allmethods(weight = 13.43, mc = 16)
library(m2m)
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:2),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# optimize
mod$optimize()
mod$predict_allmethods(weight = 13.43, mc = 16)
mod$predict_allmethods(weight = 13.43, mc = 16)
mod$predict_allmethods(weight = 13.43, mc = 19)
mod$predict_allmethods(weight = 13.4398, mc = 19)
mod$predict_allmethods(weight = 11, mc = 19)
head(mod$get_data())
mod$predict_allmethods(weight = 10.8, mc = 9.6)
head(mod$get_data())
mod$predict_allmethods(weight = 15, mc = 9)
mod$predict_allmethods(weight = 19, mc = 9)
mod$predict_allmethods(weight = 19, mc = 2)
mod$predict_allmethods(weight = 20, mc = 2)
head(mod$get_data())
mod$predict_allmethods(weight = 19, mc = 19)
mod$predict_allmethods(weight = 19, mc = 19)
head(mod$get_data())
mod$predict_allmethods(weight = 2, mc = 14)
mod$predict_allmethods(weight = 1, mc = 14)
mod$predict_allmethods(weight = 100, mc = 14)
mod$predict_allmethods(weight = 100, mc = 14)
mod$predict_allmethods(weight = 13.4398, mc = 19)
mod$predict_allmethods(weight = 13.4398, mc = 19)
library(m2m)
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:2),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# optimize
mod$optimize()
mod$predict_allmethods(weight = 13.4398, mc = 19)
mod$get_data()
mod$predict_allmethods(weight = 15, mc = 17)
mod$get_data()
mod$predict_allmethods(weight = 14, mc = 17)
mod$predict_allmethods(weight = 14, mc = 19)
mod$predict_allmethods(weight = 16, mc = 16)
mod$get_data()
mod$predict_allmethods(weight = 16.51253, mc = 15.5)
mod$get_data()
mod$predict_allmethods(weight = 10.6, mc = 13)
mod$get_data()
mod$predict_allmethods(weight = 10.6, mc = 10.2)
mod$get_data()
mod$predict_allmethods(weight = 10.1, mc = 10.2)
mod$predict_allmethods(weight = 10.1, mc = 10)
mod$predict_allmethods(weight = 10.1, mc = 20)
mod$get_data()
mod$predict_allmethods(weight = 15.7, mc = 14)
mod$get_data()
mod$predict_allmethods(weight = 9, mc = 13)
mod$predict_allmethods(weight = 10, mc = 13)
mod$get_data()
mod$predict_allmethods(weight = 14.01148, mc = 13.3)
mod$get_data()
mod$predict_allmethods(weight = 12.36882, mc = 15.5)
mod$get_data()
# calibration plot
mod$plot_calibration() # model fit
require(dplyr)
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
mod$plot_calibration(x.axis = "mc")
# mc vs weight plot
mod$plot_mc_vs_weight()
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
c(apply(private$..dat$mets$moe, c(2,3), mean))
c(apply(mod$.__enclos_env__$private$..dat$mets$moe, c(2,3), mean))
moe.init
c(apply(mod$.__enclos_env__$private$..dat$mets$moe, c(2,3), mean))
c(apply(mod$.__enclos_env__$private$..dat$mets$moe, c(2,3), mean))
which(is.na(moe))
moe
reps
unlist(reps)
unlist(lapply(reps, max))
unlist(lapply(reps, length))
moe
moe <- c(1, NA, 2, 3)
moe
rep(moe, each = unlist(lapply(reps, length)))
rep(moe, unlist(lapply(reps, length)))
unlist(lapply(reps, length))
moe
moe <- c(1, NA)
rep(moe, unlist(lapply(reps, length)))
moe.pred
moe.pred
which(is.na(moe.pred))
moe.pred <- rep(moe, unlist(lapply(reps, length)))
which(is.na(moe.pred))
rep(moe, unlist(lapply(reps, length)))
rep(moe, each=unlist(lapply(reps, length)))
unlist(lapply(reps, length))
c(apply(mod$.__enclos_env__$private$..dat$mets$moe, c(2,3), mean))
moe.init[which(is.na(moe.pred))]
rep(moe, unlist(lapply(reps, length)))
rep(moe, times = unlist(lapply(reps, length)))
rep(moe, each = unlist(lapply(reps, length)))
rep(moe, each = unlist(lapply(reps, length)))
lapply(moe, rep, times = unlist(lapply(reps, length)))
lapply(moe, function(x) rep(x, times = unlist(lapply(reps, length))))
lapply(moe, function(x) rep(x, unlist(lapply(reps, length))))
lapply(moe, function(x) rep(x, unlist(lapply(reps, length))))
lapply(list(moe), function(x) rep(x, unlist(lapply(reps, length))))
list(moe)
as.list(moe)
lapply(as.list(moe), function(x) rep(x, unlist(lapply(reps, length))))
rep(as.list(moe), reps)
ll <- list()
for(i in 1:length(moe))
{
ll[[i]] <- rep(as.list(moe)[[i]], reps[[i]])
}
reps[[i]]
ll <- list()
for(i in 1:length(moe))
{
ll[[i]] <- rep(as.list(moe)[[i]], length(reps[[i]]))
}
ll
unlist(ll)
ll
rep(as.list(moe)[[i]], length(reps[[i]]))
rep(moe, each = unlist(lapply(reps, length)))
rep(moe, unlist(lapply(reps, length)))
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:3),
avg.weight = TRUE
)
mod$get_data()
mod$.__enclos_env__$private$..dat
mod$.__enclos_env__$private$..dat$mets
mod$.__enclos_env__$private$..dat$mets$moe
backtransform_params
mod$.__enclos_env__$private$build_covmat
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:3),
avg.weight = TRUE
)
mod
# initialize starting parameters
mod$init_starting_params()
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:3),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
d <- private$..dat$mets
method <- private$..methods
n.methods <- length(method)
reps <- private$..reps
d <- mod$.__enclos_env__$private$..dat$mets
method <- mod$.__enclos_env__$private$..methods
n.methods <- length(method)
reps <- mod$.__enclos_env__$private$..reps
params_ <- NULL
for(i in 1:n.methods)
{
for(j in reps[[i]])
{
x.temp <- lapply(d, function(x) x[,i,j])
x.temp <- data.frame(x.temp)
coef.temp <- coef(lm(moe ~ weight + mc, data = x.temp))
sdev.temp <- sd(x.temp$moe)
params_ <- rbind(params_, c(i, j, coef.temp, sdev.temp))
}
}
i
x.temp <- lapply(d, function(x) x[,i,j])
x
x
x.temp <- lapply(d, function(x) x[i,j])
d
d[,1,1]
dim(d)
str(d)
d[1]
d[1][1]
d[1][1][1]
d[1][1][1][1]
d[]
dim(d)
length(d)
lapply(d, function(x) x[,,])
lapply(d, function(x) x[,,])
lapply(d, function(x) x[,1,])
lapply(d, function(x) x[,1,2])
lapply(d, function(x) x[,2,2])
lapply(d, function(x) x[,3,2])
j
lapply(d, function(x) x[,2,2])
lapply(d, function(x) x[,2,3])
reps
x
d
d
d$moe
reps
reps
reps[[1]]
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:2),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# optimize
mod$optimize()
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
mod$plot_calibration(x.axis = "mc")
# mc vs weight plot
mod$plot_mc_vs_weight()
# parameter summary
mod$get_params()
# profile
mod$predict_allmethods()
mod$predict_allmethods(weight = 12.36882, mc = 15.5)
mod$plot_calibration(x.axis = "mc")
# calibration plot
mod$plot_calibration() # model fit
mod$predict_allmethods(weight = 14, mc = 15.5)
mod$predict_allmethods(weight = 14, mc = 11)
mod$predict_allmethods(weight = 16, mc = 11)
mod$predict_allmethods(weight = 14, mc = 15.5)
mod$get_params()
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 4,
methods = c("sw", "tvs"),
reps = list(1:2, 1:3),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# initialize method2method class
mod <- m2m::method2method$new(
dat = ndt,
n = 25,
type = "SPF",
dimension = 8,
methods = c("sw", "tvs"),
reps = list(1:2, 1:3),
avg.weight = TRUE
)
# initialize starting parameters
mod$init_starting_params()
# optimize
mod$optimize()
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
# calibration plot
mod$plot_calibration() # model fit
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
# calibration plot
mod$plot_calibration() # model fit
mod$plot_calibration(params = "lm") # linear model fit
mod$plot_calibration(x.axis = "mc")
# mc vs weight plot
mod$plot_mc_vs_weight()
# parameter summary
mod$get_params()
# profile
mod$predict_allmethods()
# profile
mod$predict_allmethods(weight = 14, mc = 17)
# profile
mod$predict_allmethods(weight = 14, mc = 17)
# profile
mod$predict_allmethods(weight = 14, mc = 17)
# profile
mod$predict_allmethods(weight = 14, mc = 17)
mod$predict_allmethods(weight = 14, mc = 17)
mod$predict_allmethods(weight = 14, mc = 17)
mod$predict_allmethods(weight = 14, mc = 17)
mod$predict_allmethods(weight = 14, mc = 17)
library(m2m)
setwd("~/Directory/aritzia/Aritzia")
setwd("~/Directory/aritzia/Aritzia/Week1_Intro")
R
ls()
objects()
x <- "hello"
rm(x)
require(swirl)
my.list <- list(int = 1, numeric = 2.2, sublist = list(4, 5.001, "hello"), vector = my.vec)
my.vec <- c(1, 2, 3, 4)
my.list <- list(int = 1, numeric = 2.2, sublist = list(4, 5.001, "hello"), vector = my.vec)
# column-bind two vectors
vec1 <- c(1,2,3)
vec2 <- c(4,5,6)
mat <- cbind(vec1, vec2)
is.matrix(mat)
is.vector(mat)
# create a factor variable
f <- as.factor(c("I", "Like", "Sandy", "Beaches"))
is.factor(f)
a <- 5
is.integer(5)
as.integer(5)
is.numeric(a)
# check for integer value (what happens here?)
a <- 1
is.integer(a); is.logical(a); is.numeric(a)
# check for integer value (what happens here?)
a <- 0
is.integer(a); is.logical(a); is.numeric(a)
# check for integer value (what happens here?)
a <- TRUE
is.integer(a); is.logical(a); is.numeric(a)
install.packages("swirl")
library(swirl)
boxplot(rnorm(100))
boxplot(matrix(rnorm(100), ncol=2))
boxplot(matrix(rpois(100), ncol=2))
boxplot(matrix(rpois(100, 1), ncol=2))
boxplot(matrix(rgamma(100, 1), ncol=2))
boxplot(matrix(rgamma(100), ncol=2))
boxplot(matrix(rt(100), ncol=2))
boxplot(matrix(rt(100, 5), ncol=2))
View(mat)
gapminder <- read.delim("data/gapminder.tsv")
head(gapminder)
summary(gapminder)
head(gapminder)
str(gapminder)
class(gapminder)
is.data.frame(gapminder)
gapminder[1,1]
gapminder[c('China', 'Canada'),]
gapminder[c('US', 'Canada'),]
gapminder[c('US', 'Canada'),1]
gapminder[c('Canada'),1]
gapminder[c('Canada'),'Country']
gapminder[c('Canada'),'country']
gapminder[c('Albania'),'country']
gapminder['Albania','country']
gapminder[which(gapminder$country == 'Algeria'),]
is.logical(--)
is.logical(==)
is.logical(a==b)
is.logical(1==2)
# We can use logical operators
a <- 5 != 9
is.logical(a)
countries <- c("Canada", "Zimbabwe", "Argentina")
gapminder[which(gapminder$country %in% countries),]
which.max(gapminder$year)
gapminder[which.max(gapminder$year),]
plot(lifeExp ~ gdpPercap, data = gapminder, col=country)
plot(lifeExp ~ gdpPercap, data = gapminder, col=country, pch=".")
plot(lifeExp ~ gdpPercap, data = gapminder, col=country, pch="o")
plot(lifeExp ~ gdpPercap, data = gapminder, col=country, size = 1)
plot(lifeExp ~ gdpPercap, data = gapminder, col=country, sex=2)
plot(lifeExp ~ log(gdpPercap), data = gapminder, col=country, sex=2)
plot(lifeExp ~ log(gdpPercap), data = gapminder, col=country)
plot(lifeExp ~ log(gdpPercap), data = gapminder, col=continent)
which(mean(gapminder$lifeExp) > 80)
which(mean(gapminder$lifeExp) > 70)
#  What is the mean lifeExp in Algeria?
gapminder[which(gapminder$country == 'Algeria'),'lifeExp']
# extract Canada, Switzerland and Argentina
countries <- c("Canada", "Switzerland", "Argentina")
gapminder[which(gapminder$country %in% countries),]
gapminder[which(gapminder$country %in% countries), 'gdpPercap']
gapminder[which(gapminder$country %in% countries), 'gdpPercap']
# Sort countries in descending order
sort(gap.sub, decreasing = TRUE)
gap.sub <- gapminder[which(gapminder$country %in% countries), ]
# Sort countries in descending order
sort(gap.sub$, decreasing = TRUE)
# Sort countries in descending order
sort(gap.sub, decreasing = TRUE)
# Sort countries gdpPercap in descending order
sort(gap.sub,gdpPercap,  decreasing = TRUE)
# Sort countries gdpPercap in descending order
sort(gap.sub$gdpPercap,  decreasing = TRUE)
gap.sub$gdpPercap
# plot lifeExp to log(gdpPercap) and colour by continent
plot(lifeExp ~ log(gdpPercap), data = gapminder, col=continent)
vignette(tidyverse)
vignette(dplyr)
vignette('dplyr')
vignette('tidyverse')
gapminder[1,3]
gapminder[1,3]
gapminder[1:10, 2:4]
names(gapminder)[1]
gapminder[1,]
gap.gdp <- gapminder[,c('country', 'gdpPercap')]
head(gap.gdp)
sort(gap.gdp$gdpPercap, decreasing = TRUE)
gap.gdp[order(gdpPercap),]
gap.gdp[order(gap.gdp, gdpPercap),]
order(gap.gdp, gdpPercap)
order(gap.gdp, gdp.gdp$gdpPercap)
order(gap.gdp, gap.gdp$gdpPercap)
gap.gdp[order(gap.gdp$gdpPercap),]
# what country in Asia has the highest gdpPercap
gap.gdp <- gapminder[which(gapminder$continent == 'Asia'), c('country', 'gdpPercap')]
gap.gdp[order(gap.gdp$gdpPercap),]
gap.gdp[order(desc(gap.gdp$gdpPercap)),]
gap.gdp[order(gap.gdp$gdpPercap, decreasing = TRUE),]
which(gapminder$gdpPercap < 300)
# Filter out Canada, Switzerland and Argentina
countries <- c("Canada", "Switzerland", "Argentina")
gap.sub <- gapminder[which(gapminder$country %in% countries), ]
aggregate(lifeExp ~ country, gap.sub, sum)
aggregate(lifeExp ~ country, gap.sub, mean)
